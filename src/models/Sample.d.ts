/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Name = string;
export type Comments = null | string;
/**
 * Number of sub samples
 */
export type Subsamples = number;
/**
 * Number of data collections
 */
export type Datacollections = number;
export type Blsampleid = number;
export type CellA = null | number;
export type CellB = null | number;
export type CellC = null | number;
export type CellAlpha = null | number;
export type CellBeta = null | number;
export type CellGamma = null | number;
export type Name1 = string;
export type Acronym = string;
export type Proteinid = number;
export type Crystalid = number;

export interface Sample {
  name: Name;
  comments?: Comments;
  _metadata: SampleMetaData;
  blSampleId: Blsampleid;
  Crystal: Crystal;
}
export interface SampleMetaData {
  subsamples: Subsamples;
  datacollections: Datacollections;
}
export interface Crystal {
  cell_a?: CellA;
  cell_b?: CellB;
  cell_c?: CellC;
  cell_alpha?: CellAlpha;
  cell_beta?: CellBeta;
  cell_gamma?: CellGamma;
  Protein: Protein;
  crystalId: Crystalid;
}
export interface Protein {
  name: Name1;
  acronym: Acronym;
  proteinId: Proteinid;
}

type Constructor<T = {}> = new (...args: any[]) => T;
export function withSample<TBase extends Constructor>(Base: TBase) {
  return class WithSample extends Base {
    name: Name;
    comments?: Comments;
    _metadata: SampleMetaData;
    blSampleId: Blsampleid;
    Crystal: Crystal;
  };
}
export function withSampleMetaData<TBase extends Constructor>(Base: TBase) {
  return class WithSampleMetaData extends Base {
    subsamples: Subsamples;
    datacollections: Datacollections;
  };
}
export function withCrystal<TBase extends Constructor>(Base: TBase) {
  return class WithCrystal extends Base {
    cell_a?: CellA;
    cell_b?: CellB;
    cell_c?: CellC;
    cell_alpha?: CellAlpha;
    cell_beta?: CellBeta;
    cell_gamma?: CellGamma;
    Protein: Protein;
    crystalId: Crystalid;
  };
}
export function withProtein<TBase extends Constructor>(Base: TBase) {
  return class WithProtein extends Base {
    name: Name1;
    acronym: Acronym;
    proteinId: Proteinid;
  };
}
