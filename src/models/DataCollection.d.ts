/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * `Successful` on success
 */
export type Status = string;
/**
 * Directory where the data is saved
 */
export type Directory = string;
/**
 * File template for data
 */
export type DataFileTemplate = string;
/**
 * For hdf5 files, path to the images
 */
export type ImageSubPath = string;
export type NumberOfImagesPoints = number;
export type Wavelength = number;
export type ExposureTime = number;
export type Flux = number;
export type BeamPositionHorizontal = number;
export type BeamPositionVertical = number;
export type BeamSizeAtSampleHorizontal = number;
export type BeamSizeAtSampleVertical = number;
export type BeamTransmision = number;
/**
 * At edge of detector
 */
export type Resolution = number;
export type DetectorDistance = number;
export type RotationAxisStart = number;
export type RotationAxisEnd = number;
export type RotationAxisOscillation = number;
export type ExposureTime1 = RotationAxis;
/**
 * An enumeration.
 */
export type RotationAxis = 'omega' | 'phi';
export type RotationAxisOverlap = number;
export type PhiStart = number;
export type KappaStart = number;
export type OmegaStart = number;
export type ChiStart = number;
export type Datacollectionid = number;
export type Datacollectiongroupid = number;
export type Experimenttype = string;

export interface DataCollection {
  runStatus?: Status;
  imageDirectory?: Directory;
  fileTemplate?: DataFileTemplate;
  imageContainerSubPath?: ImageSubPath;
  numberOfImages?: NumberOfImagesPoints;
  wavelength?: Wavelength;
  exposureTime?: ExposureTime;
  flux?: Flux;
  xBeam?: BeamPositionHorizontal;
  yBeam?: BeamPositionVertical;
  beamSizeAtSampleX?: BeamSizeAtSampleHorizontal;
  beamSizeAtSampleY?: BeamSizeAtSampleVertical;
  transmission?: BeamTransmision;
  resolution?: Resolution;
  detectorDistance?: DetectorDistance;
  axisStart?: RotationAxisStart;
  axisEnd?: RotationAxisEnd;
  axisRange?: RotationAxisOscillation;
  rotationAxis?: ExposureTime1;
  overlap?: RotationAxisOverlap;
  phiStart?: PhiStart;
  kappaStart?: KappaStart;
  omegaStart?: OmegaStart;
  chiStart?: ChiStart;
  dataCollectionId: Datacollectionid;
  DataCollectionGroup: DataCollectionGroup;
  _metadata: DataCollectionMetaData;
}
export interface DataCollectionGroup {
  dataCollectionGroupId: Datacollectiongroupid;
  experimentType: Experimenttype;
}
export interface DataCollectionMetaData {
  snapshots: Snapshots;
}
/**
 * Snapshot statuses with ids 1-4
 */
export interface Snapshots {
  [k: string]: boolean;
}

type Constructor<T = {}> = new (...args: any[]) => T;
export function withDataCollection<TBase extends Constructor>(Base: TBase) {
  return class WithDataCollection extends Base {
    runStatus?: Status;
    imageDirectory?: Directory;
    fileTemplate?: DataFileTemplate;
    imageContainerSubPath?: ImageSubPath;
    numberOfImages?: NumberOfImagesPoints;
    wavelength?: Wavelength;
    exposureTime?: ExposureTime;
    flux?: Flux;
    xBeam?: BeamPositionHorizontal;
    yBeam?: BeamPositionVertical;
    beamSizeAtSampleX?: BeamSizeAtSampleHorizontal;
    beamSizeAtSampleY?: BeamSizeAtSampleVertical;
    transmission?: BeamTransmision;
    resolution?: Resolution;
    detectorDistance?: DetectorDistance;
    axisStart?: RotationAxisStart;
    axisEnd?: RotationAxisEnd;
    axisRange?: RotationAxisOscillation;
    rotationAxis?: ExposureTime1;
    overlap?: RotationAxisOverlap;
    phiStart?: PhiStart;
    kappaStart?: KappaStart;
    omegaStart?: OmegaStart;
    chiStart?: ChiStart;
    dataCollectionId: Datacollectionid;
    DataCollectionGroup: DataCollectionGroup;
    _metadata: DataCollectionMetaData;
  };
}
export function withDataCollectionGroup<TBase extends Constructor>(
  Base: TBase
) {
  return class WithDataCollectionGroup extends Base {
    dataCollectionGroupId: Datacollectiongroupid;
    experimentType: Experimenttype;
  };
}
export function withDataCollectionMetaData<TBase extends Constructor>(
  Base: TBase
) {
  return class WithDataCollectionMetaData extends Base {
    snapshots: Snapshots;
  };
  /**
   * Snapshot statuses with ids 1-4
   */
}
export function withSnapshots<TBase extends Constructor>(Base: TBase) {
  return class WithSnapshots extends Base {
    [k: string]: boolean;
  };
}
